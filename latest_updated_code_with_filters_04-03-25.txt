from flask import Flask, render_template, request, redirect, url_for, jsonify, send_from_directory, flash, send_file, session,abort
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import UserMixin, login_user, LoginManager, login_required, logout_user
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import InputRequired, Length, ValidationError
from flask_bcrypt import Bcrypt
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Spacer, Paragraph, Image
from werkzeug.utils import secure_filename
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import io
import uuid
from base64 import b64encode
import os
from datetime import datetime

# Initialize Flask app
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data1.db'
app.config['SECRET_KEY'] = 'Indi@1947'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024
app.config['ALLOWED_EXTENSIONS'] = {'csv'}

# Flask-Login setup
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

# Database setup
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
migrate = Migrate(app, db)

# Upload and result folders
UPLOAD_FOLDER = 'uploads'
RESULT_FOLDER = 'static/results'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['RESULT_FOLDER'] = RESULT_FOLDER

# Database Models
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), nullable=False, unique=True)
    password = db.Column(db.String(80), nullable=False)

class UploadedFile(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(255), nullable=False)
    filepath = db.Column(db.String(255), nullable=False)
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)

# Forms
class RegisterForm(FlaskForm):
    username = StringField(validators=[InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Username"})
    password = PasswordField(validators=[InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Password"})
    submit = SubmitField("Register")

    def validate_username(self, username):
        existing_user = User.query.filter_by(username=username.data).first()
        if existing_user:
            raise ValidationError("Username already exists. Please choose a different one.")

class LoginForm(FlaskForm):
    username = StringField(validators=[InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Username"})
    password = PasswordField(validators=[InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Password"})
    submit = SubmitField("Login")

# Flask-Login user loader
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Routes
@app.route('/')
def home():
    return render_template('home.html')

@app.route('/index')
@login_required
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user)
            return redirect(url_for('index'))
        else:
            flash('Incorrect username or password', 'danger')
    return render_template('login.html', form=form)

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data)
        new_user = User(username=form.username.data, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html', form=form)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/validate_data', methods=['POST'])
def validate_data():
    files = request.files
    uploaded_files = {}

    for file_key in files:
        file = files[file_key]
        if file and file.filename.endswith('.csv'):
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
            file.save(file_path)
            uploaded_files[file_key] = file_path

    if not uploaded_files:
        return jsonify({"status": "error", "message": "No valid CSV files uploaded"})

    # Basic validation: Check if all required files are uploaded
    required_files = ['l_file', 's_file', 'c_file', 'h_file', 'i_file']
    for file in required_files:
        if file not in uploaded_files:
            return jsonify({"status": "error", "message": f"Missing required file: {file}"})

    return jsonify({"status": "success", "message": "Files uploaded and validated successfully"})

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/results', methods=['POST'])
def results():
    files = {
        "land": request.files.get("l_file"),
        "sales": request.files.get("s_file"),
        "current": request.files.get("c_file"),
        "historical": request.files.get("h_file"),
        "improvement": request.files.get("i_file"),
    }

    # Get month filters from the form
    month_filters = {
        "RESIDENTIAL": int(request.form.get("res", 0)),  # Default to 0 if not provided
        "COMMERCIAL": int(request.form.get("com", 0)),
        "VACANT LAND": int(request.form.get("vl", 0)),
    }

    file_paths = {}
    for key, file in files.items():
        if file and file.filename.endswith(".csv"):
            file_path = os.path.join(UPLOAD_FOLDER, file.filename)
            file.save(file_path)
            file_paths[key] = file_path

    # Process the data with month filters
    df_sales, df_current_value = process_data(file_paths, month_filters)

    # Generate a unique file ID and save both DataFrames
    file_id = str(uuid.uuid4())
    sales_file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{file_id}.json")
    current_file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"current_{file_id}.json")
    
    df_sales.to_json(sales_file_path, orient='split')
    df_current_value.to_json(current_file_path, orient='split')

    # Generate PDF report with month filters
    pdf_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{file_id}.pdf")
    generate_pdf_report(file_id, month_filters)

    return redirect(url_for('report', file_id=file_id))

def assign_usetype(abstrprd):
    if 0 <= abstrprd <= 999:
        return 'VACANT LAND'
    elif 1000 <= abstrprd <= 1999:
        return 'RESIDENTIAL'
    elif 2000 <= abstrprd <= 2999:
        return 'COMMERCIAL'
    elif 3000 <= abstrprd <= 3999:
        return 'INDUSTRIAL'
    elif 4000 <= abstrprd <= 4999:
        return 'AGRICULTURE'
    elif 9000 <= abstrprd <= 9999:
        return 'EXEMPT'
    return 'OTHER'

def process_data(file_paths, month_filters):
    try:
        # Step 1: Load datasets
        df_land = pd.read_csv(file_paths['land'])
        df_sales = pd.read_csv(file_paths['sales'])
        df_current_value = pd.read_csv(file_paths['current'])
        df_historical = pd.read_csv(file_paths['historical'])

        if 'ABSTRLND' in df_land.columns:
            df_land.rename(columns={'ABSTRLND': 'ABSTRPRD'}, inplace=True)

        # Steps 2-6: Duplicate and mismatch removal (unchanged)
        duplicates = df_land[df_land.duplicated('PARCEL', keep=False)]
        array1 = duplicates['PARCEL'].unique()
        df_sales = df_sales[~df_sales['PARCEL'].isin(array1)]
        df_land = df_land[~df_land['PARCEL'].isin(array1)]

        mismatched_parcels = df_sales.merge(df_land[['PARCEL', 'ABSTRPRD']], on='PARCEL', how='left')
        mismatched_parcels = mismatched_parcels[mismatched_parcels['ABSTRPRD_x'] != mismatched_parcels['ABSTRPRD_y']]
        array2 = mismatched_parcels['PARCEL'].unique()
        df_sales = df_sales[~df_sales['PARCEL'].isin(array2)]
        df_land = df_land[~df_land['PARCEL'].isin(array2)]

        # Steps 7-11: Merging and computations (unchanged)
        df_current_value = df_current_value.merge(df_land[['PARCEL', 'ABSTRPRD']], on='PARCEL', how='left', suffixes=('', '_land'))
        df_current_value = df_current_value.merge(df_historical[['PARCEL', 'PREVTOT']], on='PARCEL', how='left', suffixes=('', '_hist'))
        df_current_value['CURRTOT'] = df_current_value.get('CURRTOT', 0)
        df_current_value['PREVTOT'] = df_current_value.get('PREVTOT', 0)
        df_current_value[['CURRTOT', 'PREVTOT']] = df_current_value[['CURRTOT', 'PREVTOT']].fillna(0)
        df_current_value['PCTCHANGE'] = np.where(
            df_current_value['PREVTOT'] == 0, 0,
            ((df_current_value['CURRTOT'] - df_current_value['PREVTOT']) / df_current_value['PREVTOT'])
        )
        df_current_value['PCTCHANGE'] = df_current_value['PCTCHANGE'].round(4)

        df_sales = df_sales.merge(df_current_value[['PARCEL', 'CURRTOT', 'PCTCHANGE']], on='PARCEL', how='left', suffixes=('', '_cv'))
        df_sales['RATIO'] = np.where(
            df_sales['TASP'] == 0, 0,
            df_sales['CURRTOT'] / df_sales['TASP']
        )
        df_sales['RATIO'] = df_sales['RATIO'].round(2)

        # Assign USETYPE and initial filtering
        df_sales['USETYPE'] = df_sales['ABSTRPRD'].apply(assign_usetype)
        df_sales = df_sales[df_sales['USETYPE'].isin(['RESIDENTIAL', 'COMMERCIAL', 'VACANT LAND'])]
        df_sales = df_sales[df_sales['QUALIFIED'] == 'Q']

        # Calculate MONTHS based on SYEAR (and SMONTH if available)
        base_year = df_sales['SYEAR'].min()
        if 'SMONTH' in df_sales.columns:
            base_month = df_sales.loc[df_sales['SYEAR'] == base_year, 'SMONTH'].min()
            df_sales['MONTHS'] = ((df_sales['SYEAR'] - base_year) * 12) + (df_sales['SMONTH'] - base_month)
        else:
            df_sales['MONTHS'] = (df_sales['SYEAR'] - base_year) * 12  # Fallback to year-only

        df_sales['MONTHS'] = df_sales['MONTHS'] - df_sales['MONTHS'].min()  # Normalize to start at 0

        # Apply new filtering logic
        max_months = df_sales['MONTHS'].max()  # Get the maximum MONTHS value
        df_sales_filtered = df_sales[df_sales['MONTHS'] >= (max_months - df_sales['USETYPE'].map(month_filters).fillna(0))]

        df_sales = df_sales_filtered

        # Ensure all required columns exist
        required_columns = ['SYEAR', 'RATIO', 'CURRTOT', 'TASP', 'PCTCHANGE', 'USETYPE', 'MONTHS']
        for col in required_columns:
            if col not in df_sales.columns:
                df_sales[col] = 0

        print(df_sales.head())  # Debugging
        return df_sales, df_current_value
    except Exception as e:
        print(f"Error processing data: {e}")
        return pd.DataFrame(), pd.DataFrame()
            
def compute_statistics(group):
    return {
        'SYEAR': group['SYEAR'].iloc[0],
        'Median Ratio': round(group['RATIO'].median(), 2),
        'COD': round(((group['RATIO'] - group['RATIO'].median()).abs().mean() / group['RATIO'].median()) * 100, 2),
        'N': len(group),
        'Mean Ratio': round(group['RATIO'].mean(), 2),
        'Weighted Mean Ratio': round(group['CURRTOT'].sum() / group['TASP'].sum(), 2),
        'PRD': round(group['RATIO'].mean() / (group['CURRTOT'].sum() / group['TASP'].sum()), 2),
    }

def compute_pctchange_stats(group):
    return {
        'SYEAR': group['SYEAR'].iloc[0],
        'N': len(group),
        'Mean': round(group['PCTCHANGE'].mean(), 4),
        'Median': round(group['PCTCHANGE'].median(), 4),
        'Min': round(group['PCTCHANGE'].min(), 4),
        'Max': round(group['PCTCHANGE'].max(), 4)
    }

def compute_pctchange_stats_nonsold(group):
    return {
        'N': len(group),
        'Mean': round(group['PCTCHANGE'].mean(), 4),
        'Median': round(group['PCTCHANGE'].median(), 4),
        'Min': round(group['PCTCHANGE'].min(), 4),
        'Max': round(group['PCTCHANGE'].max(), 4)
    }

# Function to calculate the total row for table1_data
def calculate_total_table1(data):
    total_N = 0
    total_Median_Ratio = 0
    total_COD = 0
    total_Mean_Ratio = 0
    total_Weighted_Mean_Ratio = 0
    total_PRD = 0
    count = len(data) - 1  # Subtract 1 to exclude the header row

    for row in data[1:]:  # Skip the header row
        total_N += row[3]  # N is at index 3
        total_Median_Ratio += row[1]  # Median Ratio is at index 1
        total_COD += row[2]  # COD is at index 2
        total_Mean_Ratio += row[4]  # Mean Ratio is at index 4
        total_Weighted_Mean_Ratio += row[5]  # Weighted Mean Ratio is at index 5
        total_PRD += row[6]  # PRD is at index 6

    # Calculate averages and round to 2-3 decimal places
    avg_Median_Ratio = round(total_Median_Ratio / count, 3)
    avg_COD = round(total_COD / count, 3)
    avg_Mean_Ratio = round(total_Mean_Ratio / count, 3)
    avg_Weighted_Mean_Ratio = round(total_Weighted_Mean_Ratio / count, 3)
    avg_PRD = round(total_PRD / count, 3)

    # Return the total row
    return ["Total", avg_Median_Ratio, avg_COD, total_N, avg_Mean_Ratio, avg_Weighted_Mean_Ratio, avg_PRD]

# Function to calculate the total row for table2_data
def calculate_total_table2(data):
    total_N = 0
    total_Mean = 0
    total_Median = 0
    total_Min = 0
    total_Max = 0
    count = len(data) - 1  # Subtract 1 to exclude the header row

    for row in data[1:]:  # Skip the header row
        total_N += row[1]  # N is at index 1
        total_Mean += row[2]  # Mean is at index 2
        total_Median += row[3]  # Median is at index 3
        total_Min += row[4]  # Min is at index 4
        total_Max += row[5]  # Max is at index 5

    # Calculate averages and round to 2-3 decimal places
    avg_Mean = round(total_Mean / count, 3)
    avg_Median = round(total_Median / count, 3)
    avg_Min = round(total_Min / count, 3)
    avg_Max = round(total_Max / count, 3)

    # Return the total row
    return ["Total", total_N, avg_Mean, avg_Median, avg_Min, avg_Max]


def generate_pdf_report(file_id, month_filters):
    pdf_path = os.path.join("static", f"report_{file_id}.pdf")
    doc = SimpleDocTemplate(pdf_path, pagesize=letter)
    elements = []
    styles = getSampleStyleSheet()

    elements.append(Paragraph("Audit Ratios", styles["Title"]))
    elements.append(Spacer(1, 12))

    file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{file_id}.json")
    if not os.path.exists(file_path):
        return "Data file not found."
    df_sales = pd.read_json(file_path, orient='split')

    current_file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"current_{file_id}.json")
    if not os.path.exists(current_file_path):
        return "Current value file not found."
    df_current_value = pd.read_json(current_file_path, orient='split')

    # Compute tables with filtered data
    usetypes = df_sales['USETYPE'].unique()
    table1_data = {usetype: [compute_statistics(group) for _, group in df_sales[df_sales['USETYPE'] == usetype].groupby('SYEAR')] for usetype in usetypes}
    table2_data = {usetype: [compute_pctchange_stats(group) for _, group in df_sales[df_sales['USETYPE'] == usetype].groupby('SYEAR')] for usetype in usetypes}

    # Non-sold properties with month filtering
    sold_parcels = df_sales['PARCEL'].unique()
    df_non_sold = df_current_value[~df_current_value['PARCEL'].isin(sold_parcels)].copy()
    df_non_sold['USETYPE'] = df_non_sold['ABSTRPRD'].apply(assign_usetype)
    df_non_sold = df_non_sold[df_non_sold['USETYPE'].isin(['RESIDENTIAL', 'COMMERCIAL', 'VACANT LAND'])]

    # Calculate MONTHS for non-sold properties
    if 'SYEAR' in df_non_sold.columns:
        base_year = df_non_sold['SYEAR'].min()
        if 'SMONTH' in df_non_sold.columns:
            base_month = df_non_sold.loc[df_non_sold['SYEAR'] == base_year, 'SMONTH'].min()
            df_non_sold['MONTHS'] = ((df_non_sold['SYEAR'] - base_year) * 12) + (df_non_sold['SMONTH'] - base_month)
        else:
            df_non_sold['MONTHS'] = (df_non_sold['SYEAR'] - base_year) * 12
        df_non_sold['MONTHS'] = df_non_sold['MONTHS'] - df_non_sold['MONTHS'].min()

        # Apply month filters to non-sold properties
        filtered_non_sold = pd.DataFrame()
        for usetype, max_months in month_filters.items():
            usetype_data = df_non_sold[df_non_sold['USETYPE'] == usetype]
            if max_months > 0:
                usetype_data = usetype_data[usetype_data['MONTHS'] <= max_months]
            filtered_non_sold = pd.concat([filtered_non_sold, usetype_data])
        df_non_sold = filtered_non_sold

    non_sold_grouped = df_non_sold.groupby(['USETYPE'])
    non_sold_table_data = [compute_pctchange_stats_nonsold(group) for _, group in non_sold_grouped]

    colors_map = {'RESIDENTIAL': 'green', 'COMMERCIAL': 'red', 'VACANT LAND': 'blue'}
    pastel_colors = [colors.lightblue, colors.lavender, colors.mintcream, colors.lightpink, colors.honeydew]

    for usetype in usetypes:
        filter_months = month_filters.get(usetype, 0)
        elements.append(Paragraph(f"Ratios for {usetype} (Filtered: {filter_months} months)", styles["Heading2"]))
        elements.append(Spacer(1, 6))

        # Generate scatter plot with filtered data
        filtered_data = df_sales[df_sales['USETYPE'] == usetype]
        plot_path = os.path.join(app.config['RESULT_FOLDER'], f"{usetype}_scatter.png")
        plt.figure(figsize=(6, 4))
        plt.scatter(
            filtered_data['MONTHS'], filtered_data['RATIO'], 
            alpha=0.5, color=colors_map.get(usetype, 'black'), 
            marker='x', s=20
        )
        plt.xlabel('Months')
        plt.ylabel('Ratio')
        plt.ylim(0, 3)
        plt.xlim(0, max(filter_months, 60) if filter_months > 0 else 60)  # Dynamic x-limit
        plt.title(f'Scatter Plot for {usetype}')
        plt.savefig(plot_path)
        plt.close()

        # Table 1: Ratios
        data = [["SYEAR", "Median Ratio", "COD", "N", "Mean Ratio", "Weighted Mean Ratio", "PRD"]]
        for row in table1_data.get(usetype, []):
            data.append([row['SYEAR'], row['Median Ratio'], row['COD'], row['N'], 
                         row['Mean Ratio'], row['Weighted Mean Ratio'], row['PRD']])
        total_row = calculate_total_table1(data)
        data.append(total_row)

        table = Table(data, colWidths=[70, 90, 60, 60, 90, 120, 60])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), pastel_colors[0]),
            ('BACKGROUND', (0, -1), (-1, -1), pastel_colors[1]),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('TEXTCOLOR', (0, -1), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('BOX', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.grey),
            ('BACKGROUND', (0, 1), (-1, -2), pastel_colors[2]),
        ]))
        elements.append(table)
        elements.append(Spacer(1, 12))

        # Table 2: Percentage Change
        elements.append(Paragraph(f"Percentage Change Stats for {usetype}", styles["Heading2"]))
        elements.append(Spacer(1, 6))

        data2 = [["SYEAR", "N", "Mean", "Median", "Min", "Max"]]
        for row in table2_data.get(usetype, []):
            data2.append([row['SYEAR'], row['N'], row['Mean'], row['Median'], row['Min'], row['Max']])
        total_row2 = calculate_total_table2(data2)
        data2.append(total_row2)

        table2 = Table(data2, colWidths=[70, 60, 80, 80, 80, 80])
        table2.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), pastel_colors[0]),
            ('BACKGROUND', (0, -1), (-1, -1), pastel_colors[1]),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('TEXTCOLOR', (0, -1), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('BOX', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.grey),
            ('BACKGROUND', (0, 1), (-1, -2), pastel_colors[2]),
        ]))
        elements.append(table2)
        elements.append(Spacer(1, 12))

        if os.path.exists(plot_path):
            elements.append(Image(plot_path, width=400, height=300))
        elements.append(Spacer(1, 12))

    # Non-sold Properties Table
    elements.append(Paragraph("Unsold Properties", styles["Heading2"]))
    elements.append(Spacer(1, 6))

    data_table_non_sold = [["USETYPE", "N", "Mean", "Median", "Min", "Max"]] + \
                         [[group_name] + list(row.values()) for group_name, row in zip(non_sold_grouped.groups.keys(), non_sold_table_data)]
    
    table_non_sold = Table(data_table_non_sold, colWidths=[80, 50, 80, 80, 60, 60])
    table_non_sold.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#FFB6C1")),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor("#FFF5EE")),
    ]))
    elements.append(table_non_sold)

    doc.build(elements)
    return pdf_path

@app.route('/report/<string:file_id>')
def report(file_id):
    if not file_id:
        return "No data found. Please process the data first.", 400

    file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{file_id}.json")
    if not os.path.exists(file_path):
        return "Data file not found.", 404
    df_sales = pd.read_json(file_path, orient='split')

    current_file_path = os.path.join(app.config['UPLOAD_FOLDER'], f"current_{file_id}.json")
    if not os.path.exists(current_file_path):
        return "Current value file not found.", 404
    df_current_value = pd.read_json(current_file_path, orient='split')

    # Compute tables with filtered data
    usetypes = df_sales['USETYPE'].unique()
    table1_data = {usetype: [compute_statistics(group) for _, group in df_sales[df_sales['USETYPE'] == usetype].groupby('SYEAR')] for usetype in usetypes}
    table2_data = {usetype: [compute_pctchange_stats(group) for _, group in df_sales[df_sales['USETYPE'] == usetype].groupby('SYEAR')] for usetype in usetypes}

    # Non-sold properties (already filtered in process_data and persisted)
    sold_parcels = df_sales['PARCEL'].unique()
    df_non_sold = df_current_value[~df_current_value['PARCEL'].isin(sold_parcels)].copy()
    df_non_sold['USETYPE'] = df_non_sold['ABSTRPRD'].apply(assign_usetype)
    df_non_sold = df_non_sold[df_non_sold['USETYPE'].isin(['RESIDENTIAL', 'COMMERCIAL', 'VACANT LAND'])]
    summary_data = df_non_sold.groupby('USETYPE')['PCTCHANGE'].agg(['count', 'mean', 'median', 'min', 'max']).reset_index().round(4).to_dict('records')

    # Generate scatter plots with filtered data
    colors_map = {'RESIDENTIAL': 'green', 'COMMERCIAL': 'red', 'VACANT LAND': 'blue'}
    os.makedirs("static", exist_ok=True)
    for usetype in usetypes:
        filtered_data = df_sales[df_sales['USETYPE'] == usetype]
        plot_path = os.path.join("static", f"{usetype}_scatter.png")
        plt.figure(figsize=(6, 4))
        plt.scatter(filtered_data['MONTHS'], filtered_data['RATIO'], alpha=0.5, color=colors_map.get(usetype, 'black'), marker='x', s=20)
        plt.xlabel('Months')
        plt.ylabel('Ratio')
        plt.ylim(0, 3)
        plt.xlim(0, 60)  # Could be dynamic based on filter, but kept static for simplicity here
        plt.title(f'Scatter Plot for {usetype}')
        plt.savefig(plot_path)
        plt.close()

    return render_template('report.html', 
                          usetypes=usetypes, 
                          table1_data=table1_data, 
                          table2_data=table2_data, 
                          summary_data=summary_data, 
                          download_link=f"/download_pdf?file_id={file_id}")

@app.route('/download_pdf')
def download_pdf():
    file_id = request.args.get('file_id')
    if not file_id:
        return "No file ID provided.", 400

    pdf_path = os.path.join("static", f"report_{file_id}.pdf")
    if not os.path.exists(pdf_path):
        return abort(404, description="Requested PDF file not found.")

    return send_file(pdf_path, as_attachment=True)

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)